#lang rosette/safe

(require
  "base.rkt")

(provide (all-defined-out))

(struct regs
  (ra sp gp tp t0 t1 t2 s0 s1 a0 a1 a2 a3 a4 a5 a6 a7 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 t3 t4 t5 t6
  satp scause scounteren sepc sscratch sstatus stvec stval mepc sip sie)
  #:methods
  gen:equal+hash
  [(define (equal-proc a b equal?-recur)
    (&& (equal?-recur (regs-ra a) (regs-ra b))
        (equal?-recur (regs-sp a) (regs-sp b))
        (equal?-recur (regs-gp a) (regs-gp b))
        (equal?-recur (regs-tp a) (regs-tp b))
        (equal?-recur (regs-t0 a) (regs-t0 b))
        (equal?-recur (regs-t1 a) (regs-t1 b))
        (equal?-recur (regs-t2 a) (regs-t2 b))
        (equal?-recur (regs-s0 a) (regs-s0 b))
        (equal?-recur (regs-s1 a) (regs-s1 b))
        (equal?-recur (regs-a0 a) (regs-a0 b))
        (equal?-recur (regs-a1 a) (regs-a1 b))
        (equal?-recur (regs-a2 a) (regs-a2 b))
        (equal?-recur (regs-a3 a) (regs-a3 b))
        (equal?-recur (regs-a4 a) (regs-a4 b))
        (equal?-recur (regs-a5 a) (regs-a5 b))
        (equal?-recur (regs-a6 a) (regs-a6 b))
        (equal?-recur (regs-a7 a) (regs-a7 b))
        (equal?-recur (regs-s2 a) (regs-s2 b))
        (equal?-recur (regs-s3 a) (regs-s3 b))
        (equal?-recur (regs-s4 a) (regs-s4 b))
        (equal?-recur (regs-s5 a) (regs-s5 b))
        (equal?-recur (regs-s6 a) (regs-s6 b))
        (equal?-recur (regs-s7 a) (regs-s7 b))
        (equal?-recur (regs-s8 a) (regs-s8 b))
        (equal?-recur (regs-s9 a) (regs-s9 b))
        (equal?-recur (regs-s10 a) (regs-s10 b))
        (equal?-recur (regs-s11 a) (regs-s11 b))
        (equal?-recur (regs-t3 a) (regs-t3 b))
        (equal?-recur (regs-t4 a) (regs-t4 b))
        (equal?-recur (regs-t5 a) (regs-t5 b))
        (equal?-recur (regs-t6 a) (regs-t6 b))
        (equal?-recur (regs-satp a) (regs-satp b))
        (equal?-recur (regs-scause a) (regs-scause b))
        (equal?-recur (regs-scounteren a) (regs-scounteren b))
        (equal?-recur (regs-sepc a) (regs-sepc b))
        (equal?-recur (regs-sscratch a) (regs-sscratch b))
        (equal?-recur (regs-sstatus a) (regs-sstatus b))
        (equal?-recur (regs-stvec a) (regs-stvec b))
        (equal?-recur (regs-stval a) (regs-stval b))
        (equal?-recur (regs-mepc a) (regs-mepc b))
        (equal?-recur (regs-sip a) (regs-sip b))
        (equal?-recur (regs-sie a) (regs-sie b))))

   (define (hash-proc a hash-recur) 1)
   (define (hash2-proc a hash2-recur) 22)])

(define (zero-regs)
  (regs (bv 0 64) (bv 0 64) (bv 0 64) (bv 0 64) (bv 0 64) (bv 0 64) (bv 0 64) (bv 0 64)
        (bv 0 64) (bv 0 64) (bv 0 64) (bv 0 64) (bv 0 64) (bv 0 64) (bv 0 64) (bv 0 64)
        (bv 0 64) (bv 0 64) (bv 0 64) (bv 0 64) (bv 0 64) (bv 0 64) (bv 0 64) (bv 0 64)
        (bv 0 64) (bv 0 64) (bv 0 64) (bv 0 64) (bv 0 64) (bv 0 64) (bv 0 64) (bv 0 64)
        (bv 0 64) (bv 0 64) (bv 0 64) (bv 0 64) (bv 0 64) (bv 0 64) (bv 0 64) (bv 0 64)
        (bv 0 64) (bv 0 64)))