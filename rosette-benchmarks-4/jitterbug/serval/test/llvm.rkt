#lang rosette/safe

(require
  racket/base
  racket/string
  serval/lib/core
  serval/lib/unittest
  (prefix-in llvm: serval/llvm/base)
  (prefix-in llvm: serval/llvm/parse)
  (prefix-in llvm: serval/llvm/print)
)

(define (check-insertvalue-undef)
  (define function-bc "
    ; Function Attrs: norecurse nounwind nonlazybind readnone uwtable
    define { i8, i8 } @concat(i8 %a, i8 %b) unnamed_addr #0 {
    start:
      %0 = insertvalue { i8, i8 } undef, i8 %a, 0
      %1 = insertvalue { i8, i8 } %0, i8 %b, 1
      ret { i8, i8 } %1
    }")
  (define function-mod (llvm:bytes->module (string->bytes/utf-8 function-bc)))
  (define out (open-output-string))
  (llvm:print-module function-mod out)
  (define function-rkt (get-output-string out))
  (define insertvalue-str
    "(insertvalue (undef (list (bitvector 8) (bitvector 8))) %a 0)")
  (assert (string-contains? function-rkt insertvalue-str))
)

(define (check-debugging-symbols)
  ; generated by compiling "int do_nothing(int value) { return value; }"
  (define function-bc "
    ; Function Attrs: norecurse nounwind readnone
    define dso_local i32 @do_nothing(i32 returned %value) local_unnamed_addr #0 !dbg !3 {
    entry:
      call void @llvm.dbg.value(metadata i32 %value, metadata !8, metadata !DIExpression()), !dbg !9
      ret i32 %value, !dbg !10
    }

    ; Function Attrs: nounwind readnone speculatable willreturn
    declare void @llvm.dbg.value(metadata, metadata, metadata) #1

    !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: \"clang version 10.0.0-4ubuntu1~18.04.2 \", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
    !1 = !DIFile(filename: \"d.c\", directory: \"/serval/test\")
    !2 = !{}
    !3 = distinct !DISubprogram(name: \"do_nothing\", scope: !1, file: !1, line: 1, type: !4, scopeLine: 1, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !7)
    !4 = !DISubroutineType(types: !5)
    !5 = !{!6, !6}
    !6 = !DIBasicType(name: \"int\", size: 32, encoding: DW_ATE_signed)
    !7 = !{!8}
    !8 = !DILocalVariable(name: \"value\", arg: 1, scope: !3, file: !1, line: 1, type: !6)
    !9 = !DILocation(line: 0, scope: !3)
    !10 = !DILocation(line: 1, column: 29, scope: !3)
  ")
  (define function-mod (llvm:bytes->module (string->bytes/utf-8 function-bc)))
  (define out (open-output-string))
  (llvm:print-module function-mod out)
  (define function-rkt (get-output-string out))
  (define debug-call "(call @llvm.dbg.")
  (assert (not (string-contains? function-rkt debug-call)))
)

(define llvm-tests
  (test-suite+
   "Tests for llvm bitcode to rosette compiler"
    (test-case+ "insertvalue undef test" (check-insertvalue-undef))
    (test-case+ "debugging symbols test" (check-debugging-symbols))
  ))

(module+ test
  (time (run-tests llvm-tests)))
